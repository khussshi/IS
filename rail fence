#include <iostream> 
#include <string> 
#include <vector> 
using namespace std; 
string railFenceEncrypt(const string& plaintext, int rails) { 
vector<string> fence(rails); 
int row = 0; 
bool down = false; 
for (char c : plaintext) { 
fence[row] += c; 
if (row == 0 || row == rails - 1) { 
down = !down; 
} 
row += down ? 1 : -1; 
} 
string ciphertext; 
for (const string& rail : fence) { 
ciphertext += rail; 
} 
return ciphertext; 
} 
2 
Practical 7 
 
Implement rail fence cipher transposition operation. 
3 
 
string railFenceDecrypt(const string& ciphertext, int rails) { 
vector<string> fence(rails); 
vector<int> indices(ciphertext.size()); 
int row = 0; 
bool down = false; 
for (int i = 0; i < ciphertext.size(); ++i) { 
indices[i] = row; 
if (row == 0 || row == rails - 1) { 
down = !down; 
} 
row += down ? 1 : -1; 
} 
int index = 0; 
for (int i = 0; i < rails; ++i) { 
for (int j = 0; j < indices.size(); ++j) { 
if (indices[j] == i) { 
fence[i] += ciphertext[index++]; 
} 
} 
} 
string plaintext; 
row = 0; 
down = false; 
for (int i = 0; i < ciphertext.size(); ++i) { 
plaintext += fence[row][0]; 
 fence[row].erase(0, 1); 
if (row == 0 || row == rails - 1) { 
down = !down; 
} 
row += down ? 1 : -1; 
} 
return plaintext; 
} 
int main() { 
string plaintext, encrypted, decrypted; 
int rails; 
cout << "Enter the plaintext: "; 
getline(cin, plaintext); 
cout << "Enter the number of rails: "; 
cin >> rails; 
encrypted = railFenceEncrypt(plaintext, rails); 
cout << "Encrypted: " << encrypted << endl; 
decrypted = railFenceDecrypt(encrypted, rails); 
cout << "Decrypted: " << decrypted << endl; 
return 0; 
}
